1.Surrounded Regions
    要求: 把所有"X"包围区域的"O"全部转换成"X"
    分析：
        正面解决问题：把所有的包围区域都求出来,那你就要知道包围区域是怎么计算的，一共有几个包围区域等等。
        问题： 包围区域的算法不好实现。
        反面解决问题：把所有不是包围区域的"O"求出来，然后再把其他的"O"改成"X"就可以了。
        好处：不是包围区域的"O"是容易求的，只要把临边的"O"再dfs身边的"O"求出来就可以了。
    启发：把不容易干的事情，转换成自己可以做的事情，然后分析自己能做的事情和最终需要解决问题之间的联系。
2. 分割回文串：
   要求：把目标字符串分割成许多子字符串，并且所有子字符串是回文的，要求把所有情况写出来。
    分析：
        自己分析问题：第一反应是递归调用，然后把重复的情况用数组存起来，用到的时候再访问。截止条件是：index等于字符串的长度时，结束。
        缺点：没有用dfs的思想去思考问题。递归只是把大问题分解成为一个个模型相同的小问题，然后解决。
        总结：dfs模型是一个问题有很多中解法，但是都是1-n的情况顺序执行下来。中间的解法不同而已，dfs即是回溯。
            还有一点没有考虑到，就是动态判断回文的情况。在原来的基础上再增加一个元算来判断是否是回文字符串，这样处理更好。
3.不同的路径
    问题：就是组合的问题。就是在n个球中，去除a个的不同方法。
    自己解决方法：用的是动态规划的方法来解决的。尝试用dfs方法，会超时。
4.自己装了linux虚拟机。
    了解到：一开始是在root超级用户下。adduser abc, passwd abc 123456
    自己安装了gdb:
               wget下载安装包,wget的认识，是从网页上下载的工具,下载好安装包后，解压缩，./configure, make, make install
            gdb 版本是7.10.1的，几个命令: run, break,list,next,step,continue,print,watch
5.linux 查看内存的方法 在/proc/中 /proc/meminfo 
       存储的是当前内核运行状态的一系列特殊文件，用户可以通过这些文件查看有关系统硬件及当前正在运行进程的信息，甚至可以通过更改其中某些文件来改变内核的运行状态
6.KMP
    关键点在于next数组的计算。  
7.引用作为函数返回值类型时：
       1 不能返回局部变量的引用，因为局部变量会被释放掉
       2 不能返回new分配到的内存引用，因为调用者一般不会释放返回值的，会造成内存泄漏
       3 可以返回类成员的引用，最好是const
       4 流操作符重载返回是引用
       5 四则运算符不能返回引用
8哪种类初始化的时候需要intialization list 而不能用声明的
       1 类中有const成员，reference成员
       2 基类构造函数中需要初始化列表的。
9.数组作为参数传递的时候退化为指针
10. 数组和指针的区别
11. sizeof 是编译运算符 
