// 1    Remove Duplicates from Sorted Array
// 升序的数组，O(1)的空间复杂度。
int removeDuplicates(vector<int>& nums) {
    if(nums.size()==0)return 0;
    int index = 0;
    ++index;
    int val = nums[0];
    int i = 1;
    while(i<nums.size()){
        if(nums[i]==val)++i;
        else{
            nums[index++] = nums[i];
            val = nums[i];
        }
    }
    return index; 
}
time: 4ms 97.46% memery: 17.8M 89.62%
//总结：审清楚题目，往往有更简便的解法。


// 2  Remove Duplicates from Sorted Array II
        if(nums.size()==0)return 0;
        int index = 1;
        int val = nums[0];
        int i = 1;
        int capcity = 1;
        while(i<nums.size()){
            if(nums[i]==val){
                 ++ capcity;
                if(capcity==2){
                  nums[index++] = nums[i++]; 
                }else ++i;
            }
            else{
                val = nums[i];
                nums[index++] = nums[i++];
                capcity = 1;
            }
        }
        return index; 
time: 0ms 100%  memery: 10.6M  33.4%
// 总结：在原有基础上稍加改进。


// 3 Search in Rotated Sorted Array
    int _search(vector<int>& nums, int target, int begin, int end){
        if(begin > end) return -1;
        if(begin == end){
            if(target == nums[begin]) return begin;
            else return -1;
        }
        if(nums[begin]<nums[end]){
            //正常升序判断
            int mid = begin + (end - begin) / 2;
            if(target == nums[mid]) return mid;
            else if(target > nums[mid]) return _search(nums, target, mid+1, end);
            else return _search(nums, target, begin, mid-1);
        }else{
            //特殊判断
            int mid = begin + (end - begin) / 2;
            if(target == nums[mid]) return mid;
            if(nums[mid]>=nums[begin]){
                if(target>nums[mid]) return _search(nums, target, mid+1, end);
                else if(target < nums[begin]) return _search(nums, target, mid+1, end);
                else return _search(nums, target, begin, mid-1);
            }else{
                if(target<nums[mid]) return _search(nums, target, begin, mid-1);
                else if (target >= nums[begin]) return _search(nums, target, begin, mid-1);
                 else return _search(nums, target, mid+1, end);
            }
    }
    }

    int search(vector<int>& nums, int target) {
        return _search(nums, target, 0, nums.size()-1);
    }
 方法一：自己没有对空集合进行判断，递归调用函数，造成内存用的比较大。

    int search(vector<int>& nums, int target) {
        // return _search(nums, target, 0, nums.size()-1);
        if(nums.size() == 0) return -1;
        int begin = 0, end = nums.size()-1;
        while(begin <= end){
            int mid = begin + (end - begin) / 2;
            if(nums[mid] == target) return mid;
            if(nums[mid] >= nums[begin]){
                //left
                if(target > nums[mid]) begin = mid + 1;
                else if(target >= nums[begin]) end = mid - 1;
                else begin = mid + 1;
            }else{
                //right
                if(target < nums[mid]) end = mid - 1;
                else if(target >= nums[begin]) end = mid - 1;
                else begin = mid + 1;
            }
        }
        return -1;
    }
方法二： 没有了递归调用，内存消耗少了 4ms 70.40% 10.8M 60.71%
总结： 找到分情况的关键点，然后再细细的分情况，比如本题中先判断
    nums[mid]和nums[begin]来区分mid是在左半段还是在右半段。

